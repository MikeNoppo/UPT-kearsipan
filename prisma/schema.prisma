// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String   @id @default(cuid())
  username    String   @unique
  name        String
  email       String   @unique
  password    String   // Hashed password
  role        Role     @default(STAFF)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLogin   DateTime?

  // Relations
  purchaseRequests      PurchaseRequest[] @relation("RequestedBy")
  reviewedRequests      PurchaseRequest[] @relation("ReviewedBy")
  receivedItems         Reception[] @relation("ReceivedBy")
  distributedItems      Distribution[] @relation("DistributedBy")
  createdLetters        Letter[] @relation("CreatedBy")
  archivedItems         Archive[] @relation("ArchivedBy")
  stockTransactions     StockTransaction[]
  receptionItemChanges  ReceptionItemChange[]

  @@map("users")
}

model InventoryItem {
  id              String   @id @default(cuid())
  name            String
  category        String
  unit            String
  stock           Int      @default(0)
  minStock        Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  stockTransactions StockTransaction[]
  receptions        Reception[]
  distributionItems DistributionItem[]
  purchaseRequests  PurchaseRequest[]
  purchaseRequestItems PurchaseRequestItem[]
  receptionItems       ReceptionItem[]

  @@map("inventory_items")
}

model StockTransaction {
  id              String   @id @default(cuid())
  type            TransactionType
  quantity        Int
  description     String?
  createdAt       DateTime @default(now())
  
  // Relations
  itemId          String
  item            InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId          String
  user            User @relation(fields: [userId], references: [id])

  @@map("stock_transactions")
}

model PurchaseRequest {
  id              String   @id @default(cuid())
  requestNumber   String   @unique // Format: PR-001, PR-002, etc.
  itemName        String
  quantity        Int
  unit            String
  reason          String
  status          RequestStatus @default(PENDING)
  notes           String?
  requestDate     DateTime @default(now())
  reviewDate      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  requestedById   String
  requestedBy     User @relation("RequestedBy", fields: [requestedById], references: [id])
  reviewedById    String?
  reviewedBy      User? @relation("ReviewedBy", fields: [reviewedById], references: [id])
  itemId          String?
  item            InventoryItem? @relation(fields: [itemId], references: [id])
  receptions      Reception[] // Relasi ke penerimaan barang

  // Multi-item (transitional): jika menggunakan multi-item, daftar item ada di relasi items.
  items           PurchaseRequestItem[]

  @@map("purchase_requests")
}

// Item individual dalam satu PurchaseRequest (untuk mendukung banyak barang dalam 1 permintaan)
model PurchaseRequestItem {
  id                 String   @id @default(cuid())
  purchaseRequestId  String
  itemName           String
  quantity           Int
  unit               String
  itemId             String?          // relasi opsional ke InventoryItem jika dipilih dari inventaris
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  purchaseRequest    PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  item               InventoryItem?  @relation(fields: [itemId], references: [id])
  receptions         ReceptionItem[]

  @@map("purchase_request_items")
}

model Reception {
  id                  String   @id @default(cuid())
  requestId           String?
  // Legacy single-item fields (dipertahankan untuk kompatibilitas)
  itemName            String   @default("")
  requestedQuantity   Int      @default(0)
  receivedQuantity    Int      @default(0)
  unit                String   @default("")
  receiptDate         DateTime @default(now())
  status              ReceptionStatus
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  receivedById        String
  receivedBy          User @relation("ReceivedBy", fields: [receivedById], references: [id])
  itemId              String?
  item                InventoryItem? @relation(fields: [itemId], references: [id])
  purchaseRequestId   String? // Relasi ke purchase request
  purchaseRequest     PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id])
  items               ReceptionItem[]
  itemChanges         ReceptionItemChange[]

  @@map("receptions")
}

model Distribution {
  id                  String   @id @default(cuid())
  noteNumber          String   @unique
  staffName           String
  department          String
  distributionDate    DateTime
  purpose             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  distributedById     String
  distributedBy       User @relation("DistributedBy", fields: [distributedById], references: [id])
  items               DistributionItem[]

  @@map("distributions")
}

model DistributionItem {
  id                  String   @id @default(cuid())
  itemName            String
  quantity            Int
  unit                String
  createdAt           DateTime @default(now())

  // Relations
  distributionId      String
  distribution        Distribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  itemId              String?
  item                InventoryItem? @relation(fields: [itemId], references: [id])

  @@map("distribution_items")
}

model Letter {
  id              String   @id @default(cuid())
  number          String   @unique
  date            DateTime
  subject         String
  type            LetterType
  from            String?
  to              String?
  description     String?
  hasDocument     Boolean  @default(false)
  documentPath    String?
  documentName    String?  // Nama file asli yang diupload user
  documentSize    Int?     // Size file dalam bytes
  documentType    String?  // MIME type file
  uploadedAt      DateTime? // Kapan file diupload
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  createdById     String
  createdBy       User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("letters")
}

model Archive {
  id                  String   @id @default(cuid())
  code                String   @unique
  title               String
  category            String
  creationDate        DateTime
  retentionPeriod     Int      // Masa retensi dalam tahun
  location            String
  description         String?
  notes               String?
  destructionDate     DateTime? // Tanggal aktual pemusnahan (jika sudah dimusnahkan)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  archivedById        String
  archivedBy          User @relation("ArchivedBy", fields: [archivedById], references: [id])

  @@map("archives")
}

// Enums
enum Role {
  ADMINISTRATOR
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TransactionType {
  IN
  OUT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  RECEIVED
}

enum ReceptionStatus {
  COMPLETE
  PARTIAL
  DIFFERENT
}

enum LetterType {
  INCOMING
  OUTGOING
}

// Item-item penerimaan untuk purchase request multi-item
model ReceptionItem {
  id                     String   @id @default(cuid())
  receptionId            String
  purchaseRequestItemId  String? // referensi ke item permintaan (multi)
  itemName               String
  requestedQuantity      Int
  receivedQuantity       Int
  unit                   String
  itemId                 String? // referensi ke InventoryItem bila sudah terhubung
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  reception              Reception @relation(fields: [receptionId], references: [id], onDelete: Cascade)
  requestItem            PurchaseRequestItem? @relation(fields: [purchaseRequestItemId], references: [id])
  item                   InventoryItem? @relation(fields: [itemId], references: [id])
  changes                ReceptionItemChange[]

  @@map("reception_items")
}

// Audit log perubahan quantity item penerimaan
model ReceptionItemChange {
  id              String   @id @default(cuid())
  receptionId     String
  receptionItemId String
  field           String   // e.g. 'receivedQuantity'
  oldValue        Int
  newValue        Int
  userId          String
  createdAt       DateTime @default(now())

  reception       Reception     @relation(fields: [receptionId], references: [id], onDelete: Cascade)
  receptionItem   ReceptionItem @relation(fields: [receptionItemId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])

  @@map("reception_item_changes")
}